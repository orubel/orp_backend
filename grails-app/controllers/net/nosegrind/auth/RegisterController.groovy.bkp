package net.nosegrind.auth

import grails.plugin.springsecurity.NullSaltSource
import grails.plugin.springsecurity.Secured
import grails.plugin.springsecurity.SpringSecurityUtils

import org.springframework.security.authentication.AuthenticationProvider
import org.springframework.security.core.Authentication
import org.springframework.security.core.context.SecurityContextHolder

import net.nosegrind.apiframework.PersonInfo
import net.nosegrind.apiframework.RegistrationCode

import main.groovy.net.nosegrind.command.*

class RegisterController extends grails.plugins.springsecurity.ui.RegisterController {
	
	def springSecurityUiService
	def springSecurityService
	def mailService

	def register(RegisterCommand command){
		if (command.hasErrors()) {
			render view: 'index', model: [command: command]
			return
		}
		
		def uinfo = false
		def person = false
		RegistrationCode registrationCode = new RegistrationCode()

		String salt = saltSource instanceof NullSaltSource ? null : command.username
		def user = lookupUserClass().newInstance(email: command.email, username: command.username,accountLocked: true, enabled: true)
		if(!user){
			flash.error = message("That Username/Email is already taken. Please try again.")
			return
		}else{
			
			registrationCode = springSecurityUiService.register(user, command.password, salt)
			
			if (registrationCode == null || registrationCode.hasErrors()) {
				// null means problem creating the user
				//flash.error = message(code: 'spring.security.ui.register.miscError')
				flash.error = "That Username/Email is already taken. Please try again."
				flash.chainedParams = params
				redirect action: 'index'
				return
			}else{
				person = true
				def userInfo = com.saasmarkets.PersonInfo.newInstance(user:user,name:command.name,phone:command.phone,email: command.email).save(flush:true)
				uinfo = (userInfo)?true:false
			}
		}

		String url = generateLink('verifyRegistration', [t: registrationCode.token])
		
		def conf = SpringSecurityUtils.securityConfig
		def body = conf.ui.register.emailBody
		if (body.contains('$')) {
			body = evaluate(body, [user: user, url: url])
		}
		if(!person || !uinfo){
			mailService.sendMail {
				to command.email
				from conf.ui.register.emailFrom
				subject "Contact Customer Service - PreExisting Account"
				html "Thank you for your interest in registering... Unfortunately we have detected a pre-existing account. Please try again"
			}
		}else{
			mailService.sendMail {
				to command.email
				from conf.ui.register.emailFrom
				subject conf.ui.register.emailSubject
				html body.toString()
			}
		}
		
		render view: 'success', model: [emailSent: true]
	}

	def forgotPassword(){
		if (!request.post) {
				// show the form
				return
		}

		String username = params.username
		if (!username) {
				flash.error = message(code: 'spring.security.ui.forgotPassword.username.missing')
				redirect action: 'forgotPassword'
				return
		}

		String usernameFieldName = SpringSecurityUtils.securityConfig.userLookup.usernamePropertyName
		def user = Person.findWhere((usernameFieldName): username)
		//def user = Person.findByEmail(username)
		println(user.email)
		if (!user) {
				flash.error = message(code: 'spring.security.ui.forgotPassword.user.notFound')
				redirect action: 'forgotPassword'
				return
		}

		def registrationCode = new RegistrationCode(username: user."$usernameFieldName")
		registrationCode.save(flush: true)

		//def g = grailsApplication.mainContext.getBean('org.codehaus.groovy.grails.plugins.web.taglib.ApplicationTagLib')
		String url = g.createLink(controller: 'register', action: 'verifyAccount',params: [t: registrationCode.token])

		def domain = getStoreDomainFromUrl()
		def conf = SpringSecurityUtils.securityConfig
		def body = conf.ui.forgotPassword.emailBody
		if (body.contains('$')) {
				body = evaluate(body, [user: user, url: domain+url])
		}
		mailService.sendMail {
				to user.email
				from conf.ui.forgotPassword.emailFrom
				subject conf.ui.forgotPassword.emailSubject
				html body.toString()
		}

		[emailSent: true]
}





